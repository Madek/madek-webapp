:ruby
  show_title = true unless defined?(show_title) and (show_title == false)
  show_fallback = true unless defined?(show_fallback) and (show_fallback == false)
  meta_data = data && data.meta_data
  # NOTE: takes either context or vocabulary…
  context = data && (data.context || data.vocabulary)

  fallback_msg = t(:resource_meta_data_fallback)

.ui-metadata-box{class: classes}
  - if show_title
    %h3.separated.mbm.title-l= context.label
    -# TODO: vocabulary description, privacy_status

  - unless meta_data.present? # show fallback
    - if show_fallback
      %dt.media-data-title.title-xs-alt= fallback_msg

  - else # show meta data
    -# -# TMP: for POC
    -# .tmp
    %dl.media-data
      - meta_data.each do |dat|

        -# NOTE: either context or vocabulary…
        - if dat.is_a?(Presenter)
          - meta_datum = dat
          - key = meta_datum.meta_key
        - else
          - meta_datum = dat.meta_datum
          - key = dat.context_key

        - url = meta_datum.url
        - is_editable = meta_datum.policy(current_user).edit?

        - type = key.try(:value_type) || key.meta_key.value_type
        -# -# TMP for edit POC. text only!
        -# - is_editable = false unless (type == 'MetaDatum::Text')
        -# - react_editor = is_editable && { react_class: 'MetaDatumEdit',
        -#                                   meta_datum: { url: url, type: type } }
        -# %dl.media-data.mbs{data: react_editor}
        -#
        -#   %dt.media-data-title<>
        -#     = component('link', link: url, mods: 'weak') do
        -#       = component('icon.pen') if is_editable
        -#       = key.label

        %dt.media-data-title<>
          = component('link', link: url, mods: 'weak') do
            = key.label

        %dd.media-data-content
          -# decorate value by type (ex.: /decorators/meta_datum_values/text.haml)
          - decorator = type.demodulize.underscore
          = deco("meta_datum_values/#{decorator}", values: meta_datum.values)
