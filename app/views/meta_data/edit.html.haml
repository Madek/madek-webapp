:ruby
  content_for(:meta_data_header) do
    component('page-header', icon: 'â–²', text: 'MetaDatum > Edit')
  end

  form = {
    props: { action: meta_datum_path, method: 'patch' },
    head: '', # TODO: alerts
    footer: component('actions', actions: [
      link_to(t(:meta_data_form_cancel), @get.url, class: 'weak'),
      component('button.primary', mods: 'large', text: t(:meta_data_form_save), type: :submit)
    ])
  }

  placeholder_text = case @get.type
    when 'MetaDatum::Text'
      '(Text)'
    when 'MetaDatum::TextDate'
      '(Date)'
    else
      "(UUID of #{@get.type.demodulize.singularize})"
    end

- content_for(:meta_data_overview) do
  .ui-container.table
    .app-body-sidebar.ui-container.table-cell.table-side
      .ui-resources.grid
        = deco('polythumb') { deco('thumbnail', get: @get.subject_media_resource) }

    .app-body-content.ui-container.table-cell.table-substance
      %hr.separator.light

      = combo('form', form) do

        - label = { text: @get.meta_key.label,
                    comment: @get.meta_key.hint,
                    hint: @get.meta_key.description }

        -# TODO: really check check if multiple allowed!
        - multiple_allowed = (@get.type != 'MetaDatum::Text')
        - vals = @get.literal_values
        - vals = @get.values if (@get.type == 'MetaDatum::JSON')

        = combo('form-group', mods: 'columned', label: label) do
          -# one field for every current value:
          - vals.each do |text_value|
            = text_field_tag("values[]", text_value,
                              class: :block, placeholder: placeholder_text)
          -# one field to add a value
          - if multiple_allowed
            = text_field_tag("values[]", nil,
                              class: :block, placeholder: placeholder_text)


= render template: 'meta_data/meta_data_app_resource'
