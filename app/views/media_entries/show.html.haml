- unless @get.published?
  - content_for(:app_alerts) do
    = component('alert', level: 'warning', text: 'Entry is not published yet!')
  = render('media_entries/_show/unpublished_header')

:ruby
  tag_mods = ['small','ellipsed']

  entry_show = {
    header: render('media_entries/_show/resource_header'),
    tabs: render('media_entries/_show/tab_nav')
  }

  entry_show[:overview] = deco('resource_show_overview',
    mods: 'ui-media-overview',

    preview_large: component('picture', mods: ['media-set'],
                text: @get.title,
                href: @get.image_url),
    # TODO: core_vocab_deco
    # = deco('vocabulary_meta_data_table', data: meta_data.by_vocabulary[summary_vocab])
    content: combo('metadata-box',
                mods: 'ui-summary-table.ui-set-summary.compact',
                # TODO: build this list in a presenter?
                # @get.metadata => [ [key, value], [key, value] ]
                list: [['Title', @get.title, 'title-l'],
                       ['Description', @get.description],
                       ['Copyright Notice', @get.copyright_notice],
                       ['Date', @get.portrayed_object_date],
                       @get.keywords.any? ? ['Keywords', combo('tag-cloud.label',
                          mods: tag_mods,
                          list: @get.keywords)] : nil
                      ]))

- entry_show[:more_info] = capture_haml do
  -# TMP: always show this sections! (till we have js, thus tabs)
  .ui-container.midtone.rounded-bottom.pal.well

    -# Demo: Render all the available Vocabularies as rows
    - if (@get.meta_data.vocabularies_with_meta_data).any?
      = deco('meta_data_by_vocabulary', meta_data: @get.meta_data)

= deco('resource_show', entry_show)
