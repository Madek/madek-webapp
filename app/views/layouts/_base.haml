:ruby
  #NOTE: careful with access to `settings` comes from DB and can fail hard
  site_title = begin; settings.site_title; rescue; end
  site_title ||= 'Madek' # fallback
!!!
-# NOTE: class 'has-js' is set dynamically with — suprise! — JavaScript.
%html{lang: 'de-CH'}
  %head
    %meta{charset: 'utf-8'}
    %title
      - if content_for?(:title_head)
        = "#{site_title} | #{strip_tags(content_for(:title_head))}"
      - else
        = site_title

    -# 1. init ujs as early as possible (sets class so correct styles are used)
    -# 2. add 'dynamic' config (that can't be bundled)
    - if use_js
      :javascript
        document.getElementsByTagName('html')[0].classList.add('has-js')
        #{FrontendAppConfig.to_js}

    = stylesheet_link_tag 'application', media: 'all'
    = content_for(:style_head)

    -# TODO: favicon(s)
    -# %link{href: '/favicon.ico', rel: 'shortcut icon', type: 'image/x-icon'}

    = csrf_meta_tag

    -# optional extra tags for head:
    = content_for(:head)

  %body{data: {r: controller_name, a: action_name}}
    = content_for(:body)
    - if use_js
      -# js: app lib/dependencies. can't use async/defer (would require sep. DOM ops)
      - if Rails.env == 'development'
        = javascript_include_tag 'dev-bundle'
      - else
        = javascript_include_tag 'bundle'
      -# - now all the per-template scripts, which
          MUST be self-contained and not depending on load order:
      = content_for(:scripts) if content_for?(:scripts)

  -# Implicit *yield*, don't put one here or it double-renders!
  -# Also, when in doubt use `content_for(:body)` in views.
