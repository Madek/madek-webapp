jobs:
  rspec-tests:
    name: 'RSpec Tests'
    run_when: &DEFAULT_TRIGGERS
      the branch does not match no-ci or _wip_:
        type: branch
        include_match: &default_branch_match ^.+$
        exclude_match: &default_branch_exclude ^(.*no-ci.*)|((greenkeeper|dependabot)\/.*)|([a-z]*(_|\/)wip_.*)$
    context:
      include: cider-ci/context-components/rspec-tests.yml

  lint:
    name: 'Linting'
    description: |
      Code checks: static checks and metrics: complexity, duplication, and format,
      also other consistency checks.
    priority: 3
    run_when: *DEFAULT_TRIGGERS
    context:
      task_defaults:
        environment_variables:
          GIT_LINEAR_HISTORY_CHECK_START_SHA: 3eef3fe03c77970a301e641812e11a0d80a8d188
      contexts:
        include:
          - path: cider-ci/context-components/lint/git-lint.yml
            submodule: [datalayer]
          - path: cider-ci/context-components/lint/rspec-lint.yml
            submodule: [datalayer]
          - path: cider-ci/context-components/lint/javascript-lint.yml
          - path: cider-ci/context-components/lint/ruby-lint.yml

  precompilation:
    name: 'Precompilation'
    run_when: *DEFAULT_TRIGGERS
    priority: 99 # superproject build depends on some assets, so make them fast
    context:
      include: cider-ci/context-components/precompilation.yml

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # META JOBS (only depend on other jobs)                                           #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  all-tests:
    name: 'All tests'
    description: |
      This job depends on all unit jobs that need to pass.
      It is depended upon by the super-project!
      *Note that there still be more requirements for actually pushing to `origin`,
      look in job **"Good to Merge"**!*
    priority: 999 # "empty" job = high priority
    context:
      task: "echo '✔︎ All dependencies have passed' ; exit 0"
    run_when:
      'rspec-tests passed':
        type: job
        job_key: rspec-tests
        states: [passed]
      'lint passed':
        type: job
        job_key: lint
        states: [passed]
      'precompilation':
        type: job
        job_key: precompilation
        states: [passed]
    depends_on:
      lint: { job_key: lint, type: job, states: [passed] }
      rspec-tests: { job_key: rspec-tests, type: job, states: [passed] }
      precompilation: { job_key: precompilation, type: job, states: [passed] }
      all-tests of the datalayer:
        { job_key: all-tests, type: job, submodule: [datalayer], states: [passed] }

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # GITHUB BRANCH PROTECTION                                                        #
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  good-to-merge:
    name: '⚑ Good To Merge'
    description: |
      This job depends on all jobs that need to pass for "Delivery".
      It is depended upon by GitHub's branch protection (for `master`)!
    priority: 999 # "delivery" job = high priority
    context:
      include:
        - path: cider-ci/context-components/merge-checks.yml
          submodule: [datalayer]
    depends_on:
      all-tests: { job_key: all-tests, type: job, states: [passed] }
      good to merge of the datalayer:
        { job_key: good-to-merge, type: job, submodule: [datalayer], states: [passed] }

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  # OTHER JOBS (not strictly needed for development process/delivery)
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  wip-rspec-tests:
    name: '⟨⟨⟨WIP⟩⟩⟩ RSpec Tests'
    description: |
      Run RSpec Tests in "Work-in-Progress" mode (i.e. compile assets on the fly).
    priority: -1337
    run_when:
      is on a WIP branch:
        type: branch
        include_match: ^((greenkeeper|dependabot)\/.*)|([a-z]*(_|\/)wip_.*)$
    context:
      include: cider-ci/context-components/rspec-tests.yml
      task_defaults:
        max_trials: 5
        environment_variables:
          MADEK_WIP_BRANCH: ✔︎
        scripts:
          precompile-assets:
            timeout: '5 minutes'
            exclusive_executor_resource: 'Madek-webapp-precompile-assets'
            body: |
              export PATH=~/.rubies/$RUBY/bin:$PATH
              cider-ci/bin/precompile-assets-with-caching.sh
            start_when:
              database has been configured: { script_key: configure-database }

          test:
            start_when:
              assets are precompiled: { script_key: precompile-assets }
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# JOBS THAT DO SOMETHING /o\
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# TODO: make a job that *does* the things neccessary for `Merge-Checks` to pass
# and immediatly pushes to github. This gets rid of the common timing problem
# while merging (by using the CI as a "global lock")

# do-merge:
#   name: "\uD83D\uDE4C Do Push and Merge"
#   description: |
#     *This job can be run instead of manually delivering and then re-trying the 'Merge-Checks'.*
#
#     It checks if the current commit can be automatically merged,
#     then executes the neccessary actions and finally pushes it to origin/master.
#
#   priority: 999
#
#   # same dependencies like "good to merge", but without the "merge-checks"
#   depends_on:
#     all-tests: {job_key: all-tests, type: job, states: [passed]}
#     good to merge of the datalayer: {job_key: good-to-merge, type: job, submodule: [datalayer], states: [passed]}
#
#   context:
#     tasks:
#       "Do Merge":
#
#         traits:
#           ci-executor.madek: yes
#
#         exclusive_global_resources:
#           'webapp_do_merge.ci.madek.zhdk.ch': true
#
#         git_options: { submodules: { include_match: ^.*$ } }
#         aggregate_state: satisfy-last
#         eager_trials: 1
#         max_trials: 1
#
#         scripts:
#           main:
#             body: |
#               #!/usr/bin/env bash
#               set -exu
#
#               git fetch origin
#
#               cider-ci/bin/check-git-branch-current
#               cider-ci/bin/check-git-submodules-current
#
#               # TODO: check all commits betwen origin/master...HEAD are signed
#
#               # push all submodules that reside in the 'Madek' org:
#               git submodule foreach --recursive '{ git config remote.origin.url | grep -qe 'github\.com.Madek' ;} && git push origin HEAD:master || exit 0'
#               git push origin HEAD:master
