#!/usr/bin/env node
'use strict'

// NOTE: see also the opposite script, `./dev/utilities/locale-yamls-to-csv.js`

const path = require('path')
const fs = require('fs-extra')
const f = require('active-lodash')
const YAML = require('js-yaml')
const parseTranslationsFromCSV = require('../app/assets/javascripts/lib/parse-translations-from-csv')

const CONFIG = {
  translationFile: './config/locale/translations.csv',
  outputDir: './public/assets/_rails_locales',
  // NOTE: we still keep some rails stuff around, to be removed.
  localePresetsDir: './config/locale'
}

// helpers

// merges translations with presets
const mergeTranslationsWithPresets = (locales, presetsDir) => {
  return f.map(locales, (item) => {
    let presetContent
    try {
      const presetFile = path.join(presetsDir, `${item.lang}.yml`)
      presetContent = YAML.safeLoad(fs.readFileSync(presetFile).toString())
    } catch (err) { throw new Error('Can not read locale YAML preset!', err) }

    return f.extend(item, {
      mapping: f.merge(presetContent, f.set({}, item.lang, item.mapping))
    })
  })
}

// writes translations to Rails' locale files (YAML)
const writeToLocaleFiles = (locales, outputDir) => {
  f.each(locales, (item) => {
    const outputFile = path.join(outputDir, `${item.lang}.yml`)
    const text = YAML.safeDump(item.mapping)
    try {
      fs.outputFileSync(outputFile, text, 'utf8')
    } catch (err) { throw new Error(`Can't write file '${outputFile}'!`, err) }
  })
}

// main ///////////////////////////////////////////////////////////////////////////

// reads CSV and returns list like: `[{lang: 'en', mapping: {key: 'value'}}, …]`
const text = fs.readFileSync(CONFIG.translationFile, 'utf8')
const translations = parseTranslationsFromCSV(text, CONFIG.ignoreColumns)

const locales = mergeTranslationsWithPresets(translations, CONFIG.localePresetsDir)

writeToLocaleFiles(locales, CONFIG.outputDir)

console.error('=> Building translations… OK!', {
  languages: f.map(locales, 'lang'),
  translationsCount: Object.keys(translations[0].mapping).length
})
