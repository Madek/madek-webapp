#!/usr/bin/env node
'use strict'

// NOTE: see also the opposite script, `./dev/utilities/locale-yamls-to-csv.js`

const path = require('path')
const fs = require('fs')
const YAML = require('js-yaml')
const parseTranslationsFromCSV = require('../app/javascript/lib/parse-translations-from-csv')

const CONFIG = {
  translationFile: './config/locale/translations.csv',
  outputDir: './public/assets/_rails_locales',
  // NOTE: we still keep some rails stuff around, to be removed.
  localePresetsDir: './config/locale'
}

// helpers

// Deep merge two objects
const deepMerge = (target, source) => {
  const result = { ...target }
  for (const key in source) {
    if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
      result[key] = deepMerge(result[key] || {}, source[key])
    } else {
      result[key] = source[key]
    }
  }
  return result
}

// merges translations with presets
const mergeTranslationsWithPresets = (locales, presetsDir) => {
  return locales.map((item) => {
    let presetContent
    const presetFile = path.join(presetsDir, `${item.lang}.yml`)
    presetContent = YAML.load(fs.readFileSync(presetFile, 'utf8'))

    return {
      ...item,
      mapping: deepMerge(presetContent, { [item.lang]: item.mapping })
    }
  })
}

// writes translations to Rails' locale files (YAML)
const writeToLocaleFiles = (locales, outputDir) => {
  // Ensure output directory exists
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true })
  }
  
  locales.forEach((item) => {
    const outputFile = path.join(outputDir, `${item.lang}.yml`)
    const text = YAML.dump(item.mapping)
    try {
      fs.writeFileSync(outputFile, text, 'utf8')
    } catch (err) {
      throw new Error(`Can't write file '${outputFile}'!`, err)
    }
  })
}

// main ///////////////////////////////////////////////////////////////////////////

// reads CSV and returns list like: `[{lang: 'en', mapping: {key: 'value'}}, …]`
const text = fs.readFileSync(CONFIG.translationFile, 'utf8')
const translations = parseTranslationsFromCSV(text, CONFIG.ignoreColumns)

const locales = mergeTranslationsWithPresets(translations, CONFIG.localePresetsDir)

writeToLocaleFiles(locales, CONFIG.outputDir)

console.error('=> Building translations… OK!', {
  languages: locales.map(l => l.lang),
  translationsCount: Object.keys(translations[0].mapping).length
})
